// <auto-generated />
using System;
using DAL.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DAL.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.22")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("DAL.Entities.Animal", b =>
                {
                    b.Property<string>("AnimalId")
                        .HasMaxLength(6)
                        .HasColumnType("nvarchar(6)");

                    b.Property<string>("AnimalImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Birthday")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HealthCheck")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("Rarity")
                        .HasColumnType("bit");

                    b.Property<string>("Region")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<bool>("Sex")
                        .HasColumnType("bit");

                    b.Property<string>("SpeciesId")
                        .IsRequired()
                        .HasColumnType("nvarchar(6)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("AnimalId");

                    b.HasIndex("SpeciesId");

                    b.ToTable("Animals");
                });

            modelBuilder.Entity("DAL.Entities.AnimalCage", b =>
                {
                    b.Property<string>("AnimalId")
                        .HasColumnType("nvarchar(6)");

                    b.Property<string>("CageId")
                        .HasColumnType("nvarchar(5)");

                    b.Property<DateTime>("EntryCageDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("OutCageDate")
                        .HasColumnType("datetime2");

                    b.HasKey("AnimalId", "CageId");

                    b.HasIndex("CageId");

                    b.ToTable("AnimalCages");
                });

            modelBuilder.Entity("DAL.Entities.AnimalFood", b =>
                {
                    b.Property<string>("AnimalId")
                        .HasColumnType("nvarchar(6)");

                    b.Property<string>("FoodId")
                        .HasColumnType("nvarchar(6)");

                    b.Property<float>("Amount")
                        .HasColumnType("real");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AnimalId", "FoodId");

                    b.HasIndex("FoodId");

                    b.ToTable("AnimalFoods");
                });

            modelBuilder.Entity("DAL.Entities.AnimalSchedule", b =>
                {
                    b.Property<string>("ScheduleId")
                        .HasColumnType("nvarchar(6)");

                    b.Property<string>("AnimalId")
                        .HasColumnType("nvarchar(6)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("Time")
                        .HasColumnType("datetime2");

                    b.HasKey("ScheduleId", "AnimalId");

                    b.HasIndex("AnimalId");

                    b.ToTable("AnimalSchedules");
                });

            modelBuilder.Entity("DAL.Entities.AnimalSpecies", b =>
                {
                    b.Property<string>("SpeciesId")
                        .HasMaxLength(6)
                        .HasColumnType("nvarchar(6)");

                    b.Property<string>("SpeciesName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("SpeciesId");

                    b.ToTable("AnimalSpecies");
                });

            modelBuilder.Entity("DAL.Entities.AnimalTrainer", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(6)");

                    b.Property<string>("AnimalId")
                        .HasColumnType("nvarchar(6)");

                    b.Property<DateTime?>("EndTrainDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartTrainDate")
                        .HasColumnType("datetime2");

                    b.HasKey("UserId", "AnimalId");

                    b.HasIndex("AnimalId");

                    b.ToTable("AnimalTrainers");
                });

            modelBuilder.Entity("DAL.Entities.Area", b =>
                {
                    b.Property<string>("AreaId")
                        .HasMaxLength(6)
                        .HasColumnType("nvarchar(6)");

                    b.Property<string>("AreaName")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("AreaId");

                    b.HasIndex("AreaName")
                        .IsUnique();

                    b.ToTable("Areas");
                });

            modelBuilder.Entity("DAL.Entities.Cage", b =>
                {
                    b.Property<string>("CId")
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<int>("AnimalQuantity")
                        .HasColumnType("int");

                    b.Property<string>("AreaId")
                        .IsRequired()
                        .HasColumnType("nvarchar(6)");

                    b.Property<int>("MaxCapacity")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("CId");

                    b.HasIndex("AreaId");

                    b.ToTable("Cages");
                });

            modelBuilder.Entity("DAL.Entities.ExperienceDetail", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(6)");

                    b.Property<string>("ExperienceId")
                        .HasColumnType("nvarchar(6)");

                    b.Property<string>("Company")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("UserId", "ExperienceId");

                    b.HasIndex("ExperienceId");

                    b.ToTable("ExperienceDetails");
                });

            modelBuilder.Entity("DAL.Entities.Food", b =>
                {
                    b.Property<string>("FoodId")
                        .HasMaxLength(6)
                        .HasColumnType("nvarchar(6)");

                    b.Property<string>("CategoryId")
                        .IsRequired()
                        .HasColumnType("nvarchar(6)");

                    b.Property<DateTime>("ExpiredDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<DateTime>("ImportDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("FoodId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Foods");
                });

            modelBuilder.Entity("DAL.Entities.FoodCategory", b =>
                {
                    b.Property<string>("CategoryId")
                        .HasMaxLength(6)
                        .HasColumnType("nvarchar(6)");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("CategoryId");

                    b.ToTable("FoodCategories");
                });

            modelBuilder.Entity("DAL.Entities.News", b =>
                {
                    b.Property<string>("NewsId")
                        .HasMaxLength(6)
                        .HasColumnType("nvarchar(6)");

                    b.Property<string>("NewsContent")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NewsImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NewsTitle")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<DateTime>("ReleaseDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("nvarchar(6)");

                    b.HasKey("NewsId");

                    b.HasIndex("UserId");

                    b.ToTable("News");
                });

            modelBuilder.Entity("DAL.Entities.Order", b =>
                {
                    b.Property<string>("OrderId")
                        .HasMaxLength(6)
                        .HasColumnType("nvarchar(6)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<double>("TotalPrice")
                        .HasColumnType("float");

                    b.Property<string>("TransactionId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("OrderId");

                    b.HasIndex("TransactionId")
                        .IsUnique();

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("DAL.Entities.OrderTicket", b =>
                {
                    b.Property<string>("OrderId")
                        .HasColumnType("nvarchar(6)");

                    b.Property<string>("TicketId")
                        .HasColumnType("nvarchar(6)");

                    b.Property<int>("TicketQuantity")
                        .HasColumnType("int");

                    b.HasKey("OrderId", "TicketId");

                    b.HasIndex("TicketId");

                    b.ToTable("OrderTickets");
                });

            modelBuilder.Entity("DAL.Entities.Review", b =>
                {
                    b.Property<string>("ReviewId")
                        .HasMaxLength(6)
                        .HasColumnType("nvarchar(6)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<float>("Rating")
                        .HasColumnType("real");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("ReviewId");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("DAL.Entities.Schedule", b =>
                {
                    b.Property<string>("ScheduleId")
                        .HasMaxLength(6)
                        .HasColumnType("nvarchar(6)");

                    b.Property<string>("ScheduleName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("ScheduleId");

                    b.ToTable("Schedules");
                });

            modelBuilder.Entity("DAL.Entities.Ticket", b =>
                {
                    b.Property<string>("TicketId")
                        .HasMaxLength(6)
                        .HasColumnType("nvarchar(6)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("TicketId");

                    b.ToTable("Tickets");
                });

            modelBuilder.Entity("DAL.Entities.Transaction", b =>
                {
                    b.Property<string>("TransactionId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TransactionInfo")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("TransactionId");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("DAL.Entities.User", b =>
                {
                    b.Property<string>("UserId")
                        .HasMaxLength(6)
                        .HasColumnType("nvarchar(6)");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Firstname")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Lastname")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ResetPassToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ResetTokenExpires")
                        .HasColumnType("datetime2");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<bool>("Sex")
                        .HasColumnType("bit");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<string>("UserImage")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Phone")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("DAL.Entities.WorkExperience", b =>
                {
                    b.Property<string>("ExperienceId")
                        .HasMaxLength(6)
                        .HasColumnType("nvarchar(6)");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("ExperienceId");

                    b.ToTable("WorkExperiences");
                });

            modelBuilder.Entity("DAL.Entities.Animal", b =>
                {
                    b.HasOne("DAL.Entities.AnimalSpecies", "Species")
                        .WithMany("Animals")
                        .HasForeignKey("SpeciesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Species");
                });

            modelBuilder.Entity("DAL.Entities.AnimalCage", b =>
                {
                    b.HasOne("DAL.Entities.Animal", "Animal")
                        .WithMany("AnimalCages")
                        .HasForeignKey("AnimalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Entities.Cage", "Cage")
                        .WithMany("AnimalCages")
                        .HasForeignKey("CageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Animal");

                    b.Navigation("Cage");
                });

            modelBuilder.Entity("DAL.Entities.AnimalFood", b =>
                {
                    b.HasOne("DAL.Entities.Animal", "Animal")
                        .WithMany("AnimalFoods")
                        .HasForeignKey("AnimalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Entities.Food", "Food")
                        .WithMany("AnimalFoods")
                        .HasForeignKey("FoodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Animal");

                    b.Navigation("Food");
                });

            modelBuilder.Entity("DAL.Entities.AnimalSchedule", b =>
                {
                    b.HasOne("DAL.Entities.Animal", "Animal")
                        .WithMany("AnimalSchedules")
                        .HasForeignKey("AnimalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Entities.Schedule", "Schedule")
                        .WithMany("AnimalSchedules")
                        .HasForeignKey("ScheduleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Animal");

                    b.Navigation("Schedule");
                });

            modelBuilder.Entity("DAL.Entities.AnimalTrainer", b =>
                {
                    b.HasOne("DAL.Entities.Animal", "Animal")
                        .WithMany("AnimalTrainers")
                        .HasForeignKey("AnimalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Entities.User", "User")
                        .WithMany("AnimalTrainers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Animal");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DAL.Entities.Cage", b =>
                {
                    b.HasOne("DAL.Entities.Area", "Area")
                        .WithMany("Cages")
                        .HasForeignKey("AreaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Area");
                });

            modelBuilder.Entity("DAL.Entities.ExperienceDetail", b =>
                {
                    b.HasOne("DAL.Entities.WorkExperience", "WorkExperience")
                        .WithMany("ExperienceDetails")
                        .HasForeignKey("ExperienceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Entities.User", "User")
                        .WithMany("ExperienceDetails")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");

                    b.Navigation("WorkExperience");
                });

            modelBuilder.Entity("DAL.Entities.Food", b =>
                {
                    b.HasOne("DAL.Entities.FoodCategory", "Category")
                        .WithMany("Foods")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("DAL.Entities.News", b =>
                {
                    b.HasOne("DAL.Entities.User", "User")
                        .WithMany("News")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DAL.Entities.Order", b =>
                {
                    b.HasOne("DAL.Entities.Transaction", "Transaction")
                        .WithOne("Order")
                        .HasForeignKey("DAL.Entities.Order", "TransactionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Transaction");
                });

            modelBuilder.Entity("DAL.Entities.OrderTicket", b =>
                {
                    b.HasOne("DAL.Entities.Order", "Order")
                        .WithMany("OrderTickets")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Entities.Ticket", "Ticket")
                        .WithMany("OrderTickets")
                        .HasForeignKey("TicketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Ticket");
                });

            modelBuilder.Entity("DAL.Entities.Animal", b =>
                {
                    b.Navigation("AnimalCages");

                    b.Navigation("AnimalFoods");

                    b.Navigation("AnimalSchedules");

                    b.Navigation("AnimalTrainers");
                });

            modelBuilder.Entity("DAL.Entities.AnimalSpecies", b =>
                {
                    b.Navigation("Animals");
                });

            modelBuilder.Entity("DAL.Entities.Area", b =>
                {
                    b.Navigation("Cages");
                });

            modelBuilder.Entity("DAL.Entities.Cage", b =>
                {
                    b.Navigation("AnimalCages");
                });

            modelBuilder.Entity("DAL.Entities.Food", b =>
                {
                    b.Navigation("AnimalFoods");
                });

            modelBuilder.Entity("DAL.Entities.FoodCategory", b =>
                {
                    b.Navigation("Foods");
                });

            modelBuilder.Entity("DAL.Entities.Order", b =>
                {
                    b.Navigation("OrderTickets");
                });

            modelBuilder.Entity("DAL.Entities.Schedule", b =>
                {
                    b.Navigation("AnimalSchedules");
                });

            modelBuilder.Entity("DAL.Entities.Ticket", b =>
                {
                    b.Navigation("OrderTickets");
                });

            modelBuilder.Entity("DAL.Entities.Transaction", b =>
                {
                    b.Navigation("Order")
                        .IsRequired();
                });

            modelBuilder.Entity("DAL.Entities.User", b =>
                {
                    b.Navigation("AnimalTrainers");

                    b.Navigation("ExperienceDetails");

                    b.Navigation("News");
                });

            modelBuilder.Entity("DAL.Entities.WorkExperience", b =>
                {
                    b.Navigation("ExperienceDetails");
                });
#pragma warning restore 612, 618
        }
    }
}
